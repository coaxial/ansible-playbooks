---
# Using https://help.ubuntu.com/community/KVM/Installation

- name: Install virtualization packages
  package:
    name: "{{ item }}"
    state: latest
  with_items:
    - qemu-kvm
    - libvirt-bin
    - python-libvirt

- name: Add ansible & operator to libvirt group
  user:
    name: "{{ item }}"
    append: true
    groups: libvirt
  with_items:
    - "{{ base__operator_username }}"
    - "{{ base__provisioning_username }}"

- name: Setup bridge (netplan)
  # for ubuntu < 17.10, use the interfaces.j2 file. for ubuntu >= 17.10, use
  # the netplan.j2 file
  template:
    src: templates/netplan.yml.j2
    dest: /etc/netplan/01-netcfg.yaml
    owner: root
    group: root
    mode: 0644
  # yaml is fun, cf. https://stackoverflow.com/a/21699210/2774883 for multiline
  # strings
  # distribution specific commands with help from
  # https://raymii.org/s/tutorials/Ansible_-_Only_if_on_specific_distribution_or_distribution_version.html#Specific_Distribution_Version
  when: >-
    ansible_distribution == 'Ubuntu' and
    ansible_distribution_version|float >= 17.10 and
    ansible_default_ipv4.interface not 'br0'
  register: br0_np_setup

- name: Setup bridge (NetworkManager)
  template:
    src: templates/interfaces.j2
    dest: /etc/network/interfaces
    owner: root
    group: root
    mode: 0644
  when: >-
    ansible_distribution == 'Ubuntu' and
    ansible_distribution_version|float < 17.10 and
    ansible_default_ipv4.interface not 'br0'
  register: br0_nm_setup

# Waiting for https://github.com/ansible/ansible/issues/34546 to be
# resolved
# - name: Install IP configuration packages
#   package:
#     name: "{{ item }}"
#     state: present
#   with_items:
#     - network-manager
#     - dbus
#     - python-gi
#     - libnm-glib-dev
#
# - name: Setup bridge
#   nmcli:
#     conn_name: br0
#     type: bridge
#     dns4: "{{ ip__dns4 }}"
#     ip4: "{{ ip__ip4 }}"
#     gw4: "{{ ip__gw4 }}"
#     stp: true
#     state: present
#   when: ansible_default_ipv4.alias != 'br0'
#   register: br0_setup

- name: Reboot host
  # so br0 gets an IP
  shell: sleep 2 && reboot
  # cf https://superuser.com/a/1106350/509068
  async: 1
  poll: 0
  ignore_errors: true
  when: br0_nm_setup.changed

- name: Restart network
  shell: sleep 2 && netplan apply
  async: 1
  poll: 0
  ignore_errors: true
  when: br0_np_setup.changed

- name: Wait for server to come back online
  when: br0_nm_setup.changed or br0_np_setup.changed
  local_action:
    module: wait_for
    host: "{{ ip__ip4 }}"
    state: started
    port: 22
    search_regex: OpenSSH
    delay: 15
  become: false
